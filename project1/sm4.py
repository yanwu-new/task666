#!/usr/bin/env python3
# sm4.py — 纯 Python 底层实现

########################################
# 1. SM4 常量
########################################
SBOX = [
    0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
    0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
    0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
    0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
    0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
    0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
    0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
    0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e,
    0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1,
    0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3,
    0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f,
    0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51,
    0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8,
    0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0,
    0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84,
    0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48
]

FK = [0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc]

CK = [
    0x00070e15,0x1c232a31,0x383f464d,0x545b6269,
    0x70777e85,0x8c939aa1,0xa8afb6bd,0xc4cbd2d9,
    0xe0e7eef5,0xfc030a11,0x181f262d,0x343b4249,
    0x50575e65,0x6c737a81,0x888f969d,0xa4abb2b9,
    0xc0c7ced5,0xdce3eaf1,0xf8ff060d,0x141b2229,
    0x30373e45,0x4c535a61,0x686f767d,0x848b9299,
    0xa0a7aeb5,0xbcc3cad1,0xd8dfe6ed,0xf4fb0209,
    0x10171e25,0x2c333a41,0x484f565d,0x646b7279
]

########################################
# 2. 基础函数
########################################
def _rotl32(x: int, n: int) -> int:
    """32‑bit 循环左移"""
    n &= 31
    return ((x << n) | (x >> (32 - n))) & 0xFFFFFFFF

def _tau(a: int) -> int:
    """字节代换"""
    return (
        (SBOX[(a >> 24) & 0xFF] << 24) |
        (SBOX[(a >> 16) & 0xFF] << 16) |
        (SBOX[(a >> 8)  & 0xFF] << 8)  |
        (SBOX[a & 0xFF])
    )

def _L(b: int) -> int:
    """加密时线性变换"""
    return b ^ _rotl32(b, 2) ^ _rotl32(b, 10) ^ _rotl32(b, 18) ^ _rotl32(b, 24)

def _L_prime(b: int) -> int:
    """密钥扩展时线性变换"""
    return b ^ _rotl32(b, 13) ^ _rotl32(b, 23)

def _T(x: int) -> int:
    """T 变换（加密）"""
    return _L(_tau(x))

def _T_prime(x: int) -> int:
    """T' 变换（密钥扩展）"""
    return _L_prime(_tau(x))

########################################
# 3. 密钥扩展
########################################
def key_schedule(key: bytes) -> list[int]:
    """生成 32 个轮密钥 rk[0..31]"""
    if len(key) != 16:
        raise ValueError("SM4 密钥必须为 16 字节 (128 bit)")
    MK = [int.from_bytes(key[i*4:(i+1)*4], 'big') for i in range(4)]
    K  = [MK[i] ^ FK[i] for i in range(4)]
    rk = []
    for i in range(32):
        new_k = K[i] ^ _T_prime(K[i+1] ^ K[i+2] ^ K[i+3] ^ CK[i])
        K.append(new_k)
        rk.append(new_k)
    return rk          # list[int] 长度 32

########################################
# 4. 单块加/解密
########################################
def encrypt_block(block16: bytes, rk: list[int]) -> bytes:
    """加密 16 字节块"""
    if len(block16) != 16:
        raise ValueError("明文块必须为 16 字节")
    X = [int.from_bytes(block16[i*4:(i+1)*4], 'big') for i in range(4)]
    for i in range(32):
        X.append(X[i] ^ _T(X[i+1] ^ X[i+2] ^ X[i+3] ^ rk[i]))
    # 输出时按 X[35]~X[32] 逆序
    return b''.join(X[i].to_bytes(4, 'big') for i in (35,34,33,32))

def decrypt_block(block16: bytes, rk: list[int]) -> bytes:
    """解密 16 字节块（轮密钥反序即可）"""
    return encrypt_block(block16, rk[::-1])

########################################
# 5. 可选：ECB 模式 + PKCS#7 填充
########################################
def _pkcs7_pad(data: bytes, block_size: int = 16) -> bytes:
    pad_len = block_size - (len(data) % block_size)
    return data + bytes([pad_len] * pad_len)

def _pkcs7_unpad(padded: bytes) -> bytes:
    if not padded:
        raise ValueError("数据为空")
    pad_len = padded[-1]
    if pad_len < 1 or pad_len > 16 or padded[-pad_len:] != bytes([pad_len] * pad_len):
        raise ValueError("PKCS#7 填充无效")
    return padded[:-pad_len]

def encrypt_ecb(plaintext: bytes, key: bytes) -> bytes:
    rk = key_schedule(key)
    padded = _pkcs7_pad(plaintext)
    return b''.join(encrypt_block(padded[i:i+16], rk) for i in range(0, len(padded), 16))

def decrypt_ecb(ciphertext: bytes, key: bytes) -> bytes:
    if len(ciphertext) % 16:
        raise ValueError("密文长度应为 16 的倍数")
    rk = key_schedule(key)
    plain_padded = b''.join(decrypt_block(ciphertext[i:i+16], rk) for i in range(0, len(ciphertext), 16))
    return _pkcs7_unpad(plain_padded)

########################################
# 6. 自测向量
########################################
if __name__ == "__main__":
    key = bytes.fromhex("0123456789abcdeffedcba9876543210")
    data = bytes.fromhex("0123456789abcdeffedcba9876543210")
    rk_list = key_schedule(key)
    cipher = encrypt_block(data, rk_list)
    print("Cipher =", cipher.hex())            # 681edf34d206965e86b3e94f536e4246
    assert cipher.hex() == "681edf34d206965e86b3e94f536e4246"
    assert decrypt_block(cipher, rk_list) == data
    print("单块自测通过！")
